// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  full_name  String
  email      String?  @unique
  phone      String   @unique
  role       String   @default("user")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  otps    Otp[]
  Auth    Auth?
  reviews Review[]
}

model Auth {
  id           Int     @id @default(autoincrement())
  otp_verified Boolean @default(false)
  deactivated  Boolean @default(false)
  blocked      Boolean @default(false)

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])
}

model Otp {
  id        Int      @default(autoincrement())
  code      String
  type      String
  createdAt DateTime @default(now())
  expireAt  DateTime

  user_id Int
  User    User @relation(fields: [user_id], references: [id])

  @@id([user_id, type])
}

model Product {
  id                Int     @id @default(autoincrement())
  name              String
  slug              String  @unique
  sku               String? @unique
  status            String  @default("active") // active, inactive, draft
  short_description String?
  description       String? // Long description, could be HTML
  price             Float
  sale_price        Float?
  cost_price        Float? // For profit calculations
  unit              String?
  stock_quantity    Int     @default(0)
  weight            Float? // For shipping calculations
  brand             String?
  featured          Boolean @default(false)
  has_variants      Boolean @default(false)

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  categories Category[]
  images     ProductImage[]
  variants   ProductVariant[]
  attributes ProductAttribute[]
  reviews    Review[]
}

model ProductImage {
  id            Int     @id @default(autoincrement())
  url           String
  alt_text      String?
  display_order Int     @default(0)

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ProductVariant {
  id         Int     @id @default(autoincrement())
  name       String
  sku        String? @unique
  price      Float? // Override main product price
  sale_price Float? // Override main product sale price
  stock      Int     @default(0)
  // attributes field removed

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ProductAttribute {
  id    Int    @id @default(autoincrement())
  name  String
  value String

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([product_id, name, value])
}

model Review {
  id      Int     @id @default(autoincrement())
  rating  Int
  title   String?
  content String?

  user_id    Int
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Category {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  slug         String  @unique
  description  String?
  icon         String?
  banner_image String?
  parent_id    Int?

  product Product[]

  parent Category?  @relation("parentChild", fields: [parent_id], references: [id])
  child  Category[] @relation("parentChild")
}

model Storefront_Product_Data {
  id Int @id @default(autoincrement())
}
